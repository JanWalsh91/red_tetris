/*
*	Class for a Tetris piece.
*	All pieces are represented in a 4x4 list of colors
*	Each piece has 4 possible orientations
*	Collision is checked for each non-null value against board values and positions.
*/

class Piece {

	/*
	*	Generates a new piece. Rolls once for type. If same as lastPieceType,
	*	rolls again.
	*/
	static generateRandomPiece(lastPieceType) {
		let newType = Math.floor(Math.random() * (Piece.shapeTypesCount));
		if (newType === lastPieceType) {
			newType = Math.floor(Math.random() * (Piece.shapeTypesCount));
		}
		return new Piece(newType);
	}

	/*
	*	Generates and returns a list of num pieces.
	*/
	static generateRandomPieces(num) {
		if (!num) num = 1;
		let pieces = [];
		for (let i = 0; i < num; i++) {
			let lastPieceType = null;
			if (pieces.length > 0)
				lastPieceType = pieces[pieces.length - 1].shapeType;
			pieces.push( Piece.generateRandomPiece(lastPieceType) );
		}
		return pieces;
	}

	constructor(shapeType) {
		if (shapeType < 0 || shapeType >= Piece.shapeTypesCount)
			return null;
		this.shapeType = shapeType;
		this.orientation = 0;
		this.shape = Piece.shapeTypes[this.shapeType][this.orientation];
		this.coords = {x: 3, y: 0};

	}

	// TODO: update to tryToRotate() which takes board information
	rotate() {
		this.orientation = (this.orientation + 1) % 4;
		console.log("new orientation: ", this.orientation);
		this.shape = Piece.shapeTypes[this.shapeType][this.orientation];
	}

	// TODO: update to tryToUdpateCoords() which takes board information
	udpateCoords( vector ) {
		if (!vector || !vector.x || !vector.y || !Number.isInteger(vector.x) || !Number.isInteger(vector.y))
			return ;
		this.coords.x += vector.x;
		this.coords.y += vector.y;
	}
}

Piece.shapeTypesCount = 7;
Piece.shapeTypes = [
	// cyan line
	[
		[
			[0x0,		0x0,		0x0,		0x0],
			[0xff00ff,	0xff00ff,	0xff00ff,	0xff00ff],
			[0x0,		0x0,		0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0x0,		0xff00ff,	0x0],
			[0x0,		0x0,		0xff00ff,	0x0],
			[0x0,		0x0,		0xff00ff,	0x0],
			[0x0,		0x0,		0xff00ff,	0x0],
		],
		[
			[0x0,		0x0,		0xff00ff,	0x0],
			[0x0,		0x0,		0xff00ff,	0x0],
			[0xff00ff,	0xff00ff,	0xff00ff,	0xff00ff],
			[0x0,		0x0,		0xff00ff,	0x0],
		],
		[
			[0x0,		0xff00ff,	0x0,		0x0],
			[0x0,		0xff00ff,	0x0,		0x0],
			[0x0,		0xff00ff,	0x0,		0x0],
			[0x0,		0xff00ff,	0x0,		0x0],
		]
	],
	// blue L
	[
		[
			[0x0000ff,	0x0,		0x0,		0x0],
			[0x0000ff,	0x0000ff,	0x0000ff,	0x0],
			[0x0,		0x0,		0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0x0000ff,	0x0000ff,	0x0],
			[0x0,		0x0000ff,	0x0,		0x0],
			[0x0,		0x0000ff,	0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0x0,		0x0,		0x0],
			[0x0000ff,	0x0000ff,	0x0000ff,	0x0],
			[0x0,		0x0,		0x0000ff,	0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0x0000ff,	0x0,		0x0],
			[0x0,		0x0000ff,	0x0,		0x0],
			[0x0000ff,	0x0000ff,	0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		]
	],
	// orange L
	[
		[
			[0x0,		0x0,		0xff4500,	0x0],
			[0xff4500,	0xff4500,	0xff4500,	0x0],
			[0x0,		0x0,		0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0xff4500,	0x0,		0x0],
			[0x0,		0xff4500,	0x0,		0x0],
			[0x0,		0xff4500,	0xff4500,	0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0x0,		0x0,		0x0],
			[0xff4500,	0xff4500,	0xff4500,	0x0],
			[0xff4500,	0x0,		0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0xff4500,	0xff4500,	0x0,		0x0],
			[0x0,		0xff4500,	0x0,		0x0],
			[0x0,		0xff4500,	0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		]
	],
	// yellow square
	[
		[
			[0x0,		0xffff00,	0xffff00,	0x0],
			[0x0,		0xffff00,	0xffff00,	0x0],
			[0x0,		0x0,		0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0xffff00,	0xffff00,	0x0],
			[0x0,		0xffff00,	0xffff00,	0x0],
			[0x0,		0x0,		0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0xffff00,	0xffff00,	0x0],
			[0x0,		0xffff00,	0xffff00,	0x0],
			[0x0,		0x0,		0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0xffff00,	0xffff00,	0x0],
			[0x0,		0xffff00,	0xffff00,	0x0],
			[0x0,		0x0,		0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		]
	],
	// green squiggle
	[
		[
			[0x0,		0x00ff00,	0x00ff00,	0x0],
			[0x00ff00,	0x00ff00,	0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0x00ff00,	0x0,		0x0],
			[0x0,		0x00ff00,	0x00ff00,	0x0],
			[0x0,		0x0,		0x00ff00,	0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0x0,		0x0,		0x0],
			[0x0,		0x00ff00,	0x00ff00,	0x0],
			[0x00ff00,	0x00ff00,	0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x00ff00,	0x0,		0x0,		0x0],
			[0x00ff00,	0x00ff00,	0x0,		0x0],
			[0x0,		0x00ff00,	0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		]
	],
	// purple T
	[
		[
			[0x0,		0xff00ff,	0x0,		0x0],
			[0xff00ff,	0xff00ff,	0xff00ff,	0x0],
			[0x0,		0x0,		0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0xff00ff,	0x0,		0x0],
			[0x0,		0xff00ff,	0xff00ff,	0x0],
			[0x0,		0xff00ff,	0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0x0,		0x0,		0x0],
			[0xff00ff,	0xff00ff,	0xff00ff,	0x0],
			[0x0,		0xff00ff,	0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0xff00ff,	0x0,		0x0],
			[0xff00ff,	0xff00ff,	0x0,		0x0],
			[0x0,		0xff00ff,	0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		]
	],
	// red squiggle
	[
		[
			[0xff0000,	0xff0000,	0x0,		0x0],
			[0x0,		0xff0000,	0xff0000,	0x0],
			[0x0,		0x0,		0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0x0,		0xff0000,	0x0],
			[0x0,		0xff0000,	0xff0000,	0x0],
			[0x0,		0xff0000,	0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0x0,		0x0,		0x0],
			[0xff0000,	0xff0000,	0x0,		0x0],
			[0x0,		0xff0000,	0xff0000,	0x0],
			[0x0,		0x0,		0x0,		0x0],
		],
		[
			[0x0,		0xff0000,	0x0,		0x0],
			[0xff0000,	0xff0000,	0x0,		0x0],
			[0xff0000,	0x0,		0x0,		0x0],
			[0x0,		0x0,		0x0,		0x0],
		]
	],
];


// for testing:

// console.log("test Pieces: ");
// let piece = Piece.generateRandomPiece();
// console.log("piece: ", piece);
// piece.rotate();
// console.log("piece: ", piece);
// piece.rotate();
// console.log("piece: ", piece);
// piece.rotate();
// console.log("piece: ", piece);
// piece.rotate();
// console.log("piece: ", piece);
// piece.rotate();
// console.log("piece: ", piece);

module.exports = {
	Piece: Piece
}


// export default Piece;
